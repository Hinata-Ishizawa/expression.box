names_to = c("Type", "Month"),
values_to = "Value",
names_sep = "_"
)
# 変換後のデータを表示
print(long_df)
View(df)
View(long_df)
d1 %>% filter(genes %in% gene_setA) -> dA
sample <- c("Ec1902","Ec1906","Ec1914","Ec1916","Ecf108")
rep <- 3
d <- read.table("TPM.txt", sep="\t")
head(d)
d %>% mutate(genes=rownames(d)) -> d1
#NIT4 NIT4A1, A2, A3, B1, B2, B3 の順
gene_setA <- c("BH07.2551", "AH07.2739", "CH07.2610")
d1 %>% filter(genes %in% gene_setA) -> dA
d3 <- dA %>% filter %>% pivot_longer(col = -genes, names_to = "SAMPLE", values_to = "TPM") %>%
mutate(Group=rep(rep(sample,each = rep),length(gene_setA)))
sample <- c("Ec1902","Ec1906","Ec1914","Ec1916","Ecf108")
rep <- 3
d <- read.table("TPM.txt", sep="\t")
head(d)
d %>% mutate(genes=rownames(d)) -> d1
#NIT4 NIT4A1, A2, A3, B1, B2, B3 の順
gene_setA <- c("BH07.2551", "AH07.2739", "CH07.2610")
gene_setB <- c("BH07.2550", "AH07.2737", "CH07.2609")
gene_setA1 <- c("BH07.2551")
d1 %>% filter(genes %in% gene_setA) -> dA
d1 %>% filter(genes %in% gene_setB) -> dB
d1 %>% filter(genes %in% gene_setA1) -> dA1
d3 <- dA %>% filter %>% pivot_longer(col = -genes, names_to = "SAMPLE", values_to = "TPM") %>%
mutate(Group=rep(rep(sample,each = rep),length(gene_setA)))
d4 <- dB %>% filter %>% pivot_longer(col = -genes, names_to = "SAMPLE", values_to = "TPM") %>%
mutate(Group=rep(rep(sample,each = rep),length(gene_setB)))
dA1 <- dA1 %>% filter %>% pivot_longer(col = -genes, names_to = "SAMPLE", values_to = "TPM") %>%
mutate(Group=rep(rep(sample,each = rep),length(gene_setA1)))
library(tidyverse)
sample <- c("Ecf27","Ecf99","Ecf108")
rep <- 3
d <- read.table("TPM.txt", sep="\t")
head(d)
d %>% select(-Ecf27_2, -Ecf99_2, -Ecf108_1)　->d
d %>% mutate(genes=rownames(d)) -> d1
#NIT4 NIT4A1, A2, A3, B1, B2, B3 の順
gene_setA <- c("BH07.2551", "AH07.2739", "CH07.2610")
gene_setB <- c("BH07.2550", "AH07.2737", "CH07.2609")
gene_setA1 <- c("BH07.2551")
d1 %>% filter(genes %in% gene_setA) -> dA
d1 %>% filter(genes %in% gene_setB) -> dB
d3 <- dA %>% filter %>% pivot_longer(col = -genes, names_to = "SAMPLE", values_to = "TPM") %>%
mutate(Group=rep(rep(sample,each = rep),length(gene_setA))) %>% arrange(factor(SAMPLE, levels = order_vector))
d4 <- dB %>% filter %>% pivot_longer(col = -genes, names_to = "SAMPLE", values_to = "TPM") %>%
mutate(Group=rep(rep(sample,each = rep),length(gene_setB))) %>% arrange(factor(SAMPLE, levels = order_vector))
order_vector <- c("Ecf99_1", "Ecf99_3","Ecf99_4","Ecf27_1","Ecf27_3","Ecf27_4","Ecf108_2","Ecf108_3","Ecf108_4")
d3 <- dA %>% filter %>% pivot_longer(col = -genes, names_to = "SAMPLE", values_to = "TPM") %>%
mutate(Group=rep(rep(sample,each = rep),length(gene_setA))) %>% arrange(factor(SAMPLE, levels = order_vector))
sample <- c("Ecf27","Ecf99","Ecf108")
function (x, df1, df2, ncp, log = FALSE)
{
if (missing(ncp))
.Call(C_df, x, df1, df2, log)
else .Call(C_dnf, x, df1, df2, ncp, log)
}
rep <- 3
d <- read.table("TPM.txt", sep="\t")
head(d)
d %>% select(-Ecf27_2, -Ecf99_2, -Ecf108_1)　->d
d %>% mutate(genes=rownames(d)) -> d1
#NIT4 NIT4A1, A2, A3, B1, B2, B3 の順
gene_setA <- c("BH07.2551", "AH07.2739", "CH07.2610")
gene_setB <- c("BH07.2550", "AH07.2737", "CH07.2609")
gene_setA1 <- c("BH07.2551")
gene_setB1 <- c("BH07.2550")
gene_setA2 <- c("AH07.2739")
gene_setB2 <- c("AH07.2737")
gene_setA3 <- c("CH07.2610")
gene_setB3 <- c("CH07.2609")
d1 %>% filter(genes %in% gene_setA) -> dA
d1 %>% filter(genes %in% gene_setB) -> dB
d1 %>% filter(genes %in% gene_setA1) -> dA1
d1 %>% filter(genes %in% gene_setB1) -> dB1
d1 %>% filter(genes %in% gene_setA2) -> dA2
d1 %>% filter(genes %in% gene_setB2) -> dB2
d1 %>% filter(genes %in% gene_setA3) -> dA3
d1 %>% filter(genes %in% gene_setB3) -> dB3
order_vector <- c("Ecf99_1", "Ecf99_3","Ecf99_4","Ecf27_1","Ecf27_3","Ecf27_4","Ecf108_2","Ecf108_3","Ecf108_4")
d3 <- dA %>% filter %>% pivot_longer(col = -genes, names_to = "SAMPLE", values_to = "TPM") %>%
mutate(Group=rep(rep(sample,each = rep),length(gene_setA))) %>% arrange(factor(SAMPLE, levels = order_vector))
View(d3)
View(dA)
df <- data.frame(
ID = c(1, 2, 3),
Name_Jan = c("Alice", "Bob", "Charlie"),
Name_Feb = c("David", "Eva", "Frank"),
Score_Jan = c(85, 90, 75),
Score_Feb = c(95, 88, 92)
)
df$Score_Jan <- as.character(df$Score_Jan)
df$Score_Feb <- as.character(df$Score_Feb)
# データフレームを広い形式から長い形式に変換
long_df <- pivot_longer(
data = df,
cols = starts_with("Name") | starts_with("Score"),
names_to = c("Type", "Month"),
values_to = "Value",
names_sep = "_"
)
# 変換後のデータを表示
print(long_df)
View(df)
View(long_df)
func3 <- function(file_path, gene_set){
read.table(file_path) -> data
mutate(data, genes = rownames(data))  %>%
dplyr::filter(genes %in% gene_set) %>%
filter %>% pivot_longer(col = -genes, names_to = "SAMPLE", values_to = "TPM")
}
func3 <- function(file_path, gene_set){
read.table(file_path) -> data
mutate(data, genes = rownames(data))  %>%
dplyr::filter(genes %in% gene_set) %>%
filter %>% pivot_longer(col = -genes, names_to = "SAMPLE", values_to = "TPM")
}
func3("TPM.txt", gene_set = c("BH07.2551", "BH07.2550"))
replication <- 3
sample <- c("Ecf27", "Ecf99", "Ecf108")
replication <- 3
sample <- c("Ecf27", "Ecf99", "Ecf108")
replication <- 3
sample <- c("Ecf27", "Ecf99", "Ecf108")
rep(sample, each = replication
dplyr::mutate(data, genes = rownames(data))  %>%
rep(sample, each = replication)
replication* length(gene_set)
gene_set <- c("BH07.2551", "BH07.2550")
replication* length(gene_set)
func3 <- function(file_path, gene_set, sample, replication){
read.table(file_path) -> data
dplyr::mutate(data, genes = rownames(data))  %>%
dplyr::filter(genes %in% gene_set) %>%
dplyr::filter %>% pivot_longer(col = -genes, names_to = "SAMPLE", values_to = "TPM") %>%
dplyr::mutate(Group = rep(sample, each = replication*length(gene_set)))
}
func3("TPM.txt", gene_set = c("BH07.2551", "BH07.2550"), sample = c("Ecf27", "Ecf99", "Ecf108"), replication = 3)
func3 <- function(file_path, gene_set){
read.table(file_path) -> data
dplyr::mutate(data, genes = rownames(data))  %>%
dplyr::filter(genes %in% gene_set) %>%
dplyr::filter %>% pivot_longer(col = -genes, names_to = "SAMPLE", values_to = "TPM")
}
func3("TPM.txt", gene_set = c("BH07.2551", "BH07.2550"))
func3 <- function(file_path, gene_set){
read.table(file_path) -> data
dplyr::mutate(data, genes = rownames(data))  %>%
dplyr::filter(genes %in% gene_set) %>%
tidyr::pivot_longer(col = -genes, names_to = "SAMPLE", values_to = "TPM")
}
func3("TPM.txt", gene_set = c("BH07.2551", "BH07.2550"))
func3 <- function(file_path, gene_set, sample, replication){
read.table(file_path) -> data
dplyr::mutate(data, genes = rownames(data))  %>%
dplyr::filter(genes %in% gene_set) %>%
tidyr::pivot_longer(col = -genes, names_to = "SAMPLE", values_to = "TPM") %>%
dplyr::mutate(Group = rep(sample, each = replication*length(gene_set)))
}
func3("TPM.txt", gene_set = c("BH07.2551", "BH07.2550"), sample = c("Ecf27", "Ecf99", "Ecf108"), replication = 3)
func3 <- function(file_path, gene_set){
read.table(file_path) -> data
dplyr::mutate(data, genes = rownames(data))  %>%
dplyr::filter(genes %in% gene_set) %>%
tidyr::pivot_longer(col = -genes, names_to = "SAMPLE", values_to = "TPM") -> data2
}
func3("TPM.txt", gene_set = c("BH07.2551", "BH07.2550"))
func3("TPM.txt", gene_set = c("BH07.2551", "BH07.2550")) -> data2
func3 <- function(file_path, gene_set){
read.table(file_path) -> data
dplyr::mutate(data, genes = rownames(data))  %>%
dplyr::filter(genes %in% gene_set) %>%
tidyr::pivot_longer(col = -genes, names_to = "SAMPLE", values_to = "TPM")
}
func3("TPM.txt", gene_set = c("BH07.2551", "BH07.2550")) -> data2
View(data2)
func3 <- function(file_path, gene_set, sample, replication){
read.table(file_path) -> data
dplyr::mutate(data, genes = rownames(data))  %>%
dplyr::filter(genes %in% gene_set) %>%
tidyr::pivot_longer(col = -genes, names_to = "SAMPLE", values_to = "TPM") %>%
dplyr::mutate(Group = rep(sample, each = replication*length(gene_set)))
}
func3("TPM.txt", gene_set = c("BH07.2551", "BH07.2550"), sample = c("Ecf27", "Ecf99", "Ecf108"), replication = 4)
func3 <- function(file_path, gene_set, sample, replication){
func3 <- function(file_path, gene_set, sample, replication){
func3 <- function(file_path, gene_set, sample, replication){
func3 <- function(file_path, gene_set){
read.table(file_path) -> data
dplyr::mutate(data, genes = rownames(data))  %>%
dplyr::filter(genes %in% gene_set) %>%
tidyr::pivot_longer(col = -genes, names_to = "SAMPLE", values_to = "TPM")
}
func3("TPM.txt", gene_set = c("BH07.2551", "BH07.2550")) -> data2
a
filter()
filter(a, b)
%>% print()
func3 <- function(file_path, gene_set, sample, replication){
%>% print()
func3 <- function(file_path, gene_set){
read.table(file_path) -> data
dplyr::mutate(data, genes = rownames(data))  %>%
dplyr::filter(genes %in% gene_set) %>%
tidyr::pivot_longer(col = -genes, names_to = "SAMPLE", values_to = "TPM")
}
func3 <- function(file_path, gene_set, sample, replication){
read.table(file_path) -> data
dplyr::mutate(data, genes = rownames(data))  %>%
dplyr::filter(genes %in% gene_set) %>%
tidyr::pivot_longer(col = -genes, names_to = "SAMPLE", values_to = "TPM") %>%
dplyr::mutate(Group = rep(rep(sample, each = replication), length(gene_set)))
}
func3("TPM.txt", gene_set = c("BH07.2551", "BH07.2550"), sample = c("Ecf27", "Ecf99", "Ecf108"), replication = 4)
func4 <- function(file_path, gene_set, sample, replication){
read.table(file_path) -> data1
dplyr::mutate(data, genes = rownames(data))  %>%
dplyr::filter(genes %in% gene_set) %>%
tidyr::pivot_longer(col = -genes, names_to = "SAMPLE", values_to = "TPM") %>%
dplyr::mutate(Group = rep(rep(sample, each = replication), length(gene_set))) -> data2
}
func4 <- function(file_path, gene_set, sample, replication){
read.table(file_path) -> data1
dplyr::mutate(data, genes = rownames(data))  %>%
dplyr::filter(genes %in% gene_set) %>%
tidyr::pivot_longer(col = -genes, names_to = "SAMPLE", values_to = "TPM") %>%
dplyr::mutate(Group = rep(rep(sample, each = replication), length(gene_set))) -> data2
return(data2)
}
func4("TPM.txt", gene_set = c("BH07.2551", "BH07.2550"), sample = c("Ecf27", "Ecf99", "Ecf108"), replication = 4)
func3 <- function(file_path, gene_set, sample, replication){
read.table(file_path) -> data
dplyr::mutate(data, genes = rownames(data))  %>%
dplyr::filter(genes %in% gene_set) %>%
tidyr::pivot_longer(col = -genes, names_to = "SAMPLE", values_to = "TPM") %>%
dplyr::mutate(Group = rep(rep(sample, each = replication), length(gene_set)))
}
func3("TPM.txt", gene_set = c("BH07.2551", "BH07.2550"), sample = c("Ecf27", "Ecf99", "Ecf108"), replication = 4)
func4 <- function(file_path, gene_set, sample, replication){
read.table(file_path) -> data1
dplyr::mutate(data, genes = rownames(data))  %>%
dplyr::filter(genes %in% gene_set) %>%
tidyr::pivot_longer(col = -genes, names_to = "SAMPLE", values_to = "TPM") %>%
dplyr::mutate(Group = rep(rep(sample, each = replication), length(gene_set))) -> data2
return(data2)
}
func4("TPM.txt", gene_set = c("BH07.2551", "BH07.2550"), sample = c("Ecf27", "Ecf99", "Ecf108"), replication = 4)
func4 <- function(file_path, gene_set, sample, replication){
read.table(file_path) -> data1
data2 <- dplyr::mutate(data, genes = rownames(data))  %>%
dplyr::filter(genes %in% gene_set) %>%
tidyr::pivot_longer(col = -genes, names_to = "SAMPLE", values_to = "TPM") %>%
dplyr::mutate(Group = rep(rep(sample, each = replication), length(gene_set)))
return(data2)
}
func4("TPM.txt", gene_set = c("BH07.2551", "BH07.2550"), sample = c("Ecf27", "Ecf99", "Ecf108"), replication = 4)
func4 <- function(file_path, gene_set, sample, replication){
read.table(file_path) -> data1
dplyr::mutate(data, genes = rownames(data))  %>%
dplyr::filter(genes %in% gene_set) %>%
tidyr::pivot_longer(col = -genes, names_to = "SAMPLE", values_to = "TPM") %>%
dplyr::mutate(Group = rep(rep(sample, each = replication), length(gene_set)))
return(data2)
}
func4("TPM.txt", gene_set = c("BH07.2551", "BH07.2550"), sample = c("Ecf27", "Ecf99", "Ecf108"), replication = 4)
func4 <- function(file_path, gene_set, sample, replication){
read.table(file_path) -> data1
dplyr::mutate(data, genes = rownames(data))  %>%
dplyr::filter(genes %in% gene_set) %>%
tidyr::pivot_longer(col = -genes, names_to = "SAMPLE", values_to = "TPM") %>%
dplyr::mutate(Group = rep(rep(sample, each = replication), length(gene_set)))
}
func4("TPM.txt", gene_set = c("BH07.2551", "BH07.2550"), sample = c("Ecf27", "Ecf99", "Ecf108"), replication = 4)
func3 <- function(file_path, gene_set, sample, replication){
read.table(file_path) -> data
dplyr::mutate(data, genes = rownames(data))  %>%
dplyr::filter(genes %in% gene_set) %>%
tidyr::pivot_longer(col = -genes, names_to = "SAMPLE", values_to = "TPM") %>%
dplyr::mutate(Group = rep(rep(sample, each = replication), length(gene_set)))
}
func3("TPM.txt", gene_set = c("BH07.2551", "BH07.2550"), sample = c("Ecf27", "Ecf99", "Ecf108"), replication = 4)
func3 <- function(file_path, gene_set, sample, replication){
read.table(file_path) -> data
dplyr::mutate(data, genes = rownames(data))  %>%
dplyr::filter(genes %in% gene_set) %>%
tidyr::pivot_longer(col = -genes, names_to = "SAMPLE", values_to = "TPM") %>%
dplyr::mutate(Group = rep(rep(sample, each = replication), length(gene_set)))
}
func3("TPM.txt", gene_set = c("BH07.2551", "BH07.2550"), sample = c("Ecf27", "Ecf99", "Ecf108"), replication = 4)
func3 <- function(file_path, gene_set, sample, replication){
read.table(file_path) -> data
dplyr::mutate(data, genes = rownames(data))  %>%
dplyr::filter(genes %in% gene_set) %>%
tidyr::pivot_longer(col = -genes, names_to = "SAMPLE", values_to = "TPM") %>%
dplyr::mutate(Group = rep(rep(sample, each = replication), length(gene_set))) -> data2
}
func3("TPM.txt", gene_set = c("BH07.2551", "BH07.2550"), sample = c("Ecf27", "Ecf99", "Ecf108"), replication = 4)
View(data2)
func3 <- function(file_path, gene_set, sample, replication){
read.table(file_path) -> data
dplyr::mutate(data, genes = rownames(data))  %>%
dplyr::filter(genes %in% gene_set) %>%
tidyr::pivot_longer(col = -genes, names_to = "SAMPLE", values_to = "TPM") %>%
dplyr::mutate(Group = rep(rep(sample, each = replication), length(gene_set))) -> data2
return(data2)
}
func3("TPM.txt", gene_set = c("BH07.2551", "BH07.2550"), sample = c("Ecf27", "Ecf99", "Ecf108"), replication = 4)
func3 <- function(file_path, gene_set, sample, replication){
read.table(file_path) -> data
dplyr::mutate(data, genes = rownames(data))  %>%
dplyr::filter(genes %in% gene_set) %>%
tidyr::pivot_longer(col = -genes, names_to = "SAMPLE", values_to = "TPM") %>%
dplyr::mutate(Group = rep(rep(sample, each = replication), length(gene_set))) -> data2
return(data2)
}
func3("TPM.txt", gene_set = c("BH07.2551", "BH07.2550"), sample = c("Ecf27", "Ecf99", "Ecf108"), replication = 4)
func3 <- function(file_path, gene_set, sample, replication){
read.table(file_path) -> data
dplyr::mutate(data, genes = rownames(data))  %>%
dplyr::filter(genes %in% gene_set) %>%
tidyr::pivot_longer(col = -genes, names_to = "SAMPLE", values_to = "TPM") %>%
dplyr::mutate(Group = rep(rep(sample, each = replication), length(gene_set)))
}
func3("TPM.txt", gene_set = c("BH07.2551", "BH07.2550"), sample = c("Ecf27", "Ecf99", "Ecf108"), replication = 4)
func3("TPM.txt", gene_set = c("BH07.2551", "BH07.2550"), sample = c("Ecf27", "Ecf99", "Ecf108"), replication = 4) -> data2
func4 <- function(file_path, gene_set, sample, replication){
data2 %>%
ggboxplot(x="Group", y="TPM", facet.by = "genes",
color = "Group", ylab = "TPM",
size = 0.2, add="jitter", palette = pal, fill = "Group", alpha=0.4,
add.params = list(size=1),
panel.labs.font = list(size = 12),
panel.labs.background = list(fill = "white", color = "black"))
}
func4 <- function(data2){
data2 %>%
ggboxplot(x="Group", y="TPM", facet.by = "genes",
color = "Group", ylab = "TPM",
size = 0.2, add="jitter", palette = pal, fill = "Group", alpha=0.4,
add.params = list(size=1),
panel.labs.font = list(size = 12),
panel.labs.background = list(fill = "white", color = "black"))
}
func4(data2)
func4 <- function(data2){
data2 %>%
ggpubr::ggboxplot(x="Group", y="TPM", facet.by = "genes",
color = "Group", ylab = "TPM",
size = 0.2, add="jitter", palette = pal, fill = "Group", alpha=0.4,
add.params = list(size=1),
panel.labs.font = list(size = 12),
panel.labs.background = list(fill = "white", color = "black"))
}
func4(data2)
func4 <- function(data2, pal){
data2 %>%
ggpubr::ggboxplot(x="Group", y="TPM", facet.by = "genes",
color = "Group", ylab = "TPM",
size = 0.2, add="jitter", palette = pal, fill = "Group", alpha=0.4,
add.params = list(size=1),
panel.labs.font = list(size = 12),
panel.labs.background = list(fill = "white", color = "black"))
}
func4(data2, pal = c("#7b7b7b","#7b7b7b", "#ee7800"))
func4 <- function(data2, pal){
data2 %>%
ggpubr::ggboxplot(x="Group", y="TPM", facet.by = "genes",
color = "Group", ylab = "TPM",
size = 0.2, add="jitter", palette = pal, fill = "Group", alpha=0.4,
add.params = list(size=1),
panel.labs.font = list(size = 12),
panel.labs.background = list(fill = "white", color = "black")) +
theme(axis.title.x = element_blank(),
axis.title.y = element_text(size=10),
axis.text = element_text(size=10),
axis.text.x = element_text(size = 16),
legend.position = "none")
}
func4(data2, pal = c("#7b7b7b","#7b7b7b", "#ee7800"))
func4 <- function(file_path, gene_set, sample, replication, pal){
func3(file_path, gene_set, sample, replication) %>%
ggpubr::ggboxplot(x="Group", y="TPM", facet.by = "genes",
color = "Group", ylab = "TPM",
size = 0.2, add="jitter", palette = pal, fill = "Group", alpha=0.4,
add.params = list(size=1),
panel.labs.font = list(size = 12),
panel.labs.background = list(fill = "white", color = "black")) +
theme(axis.title.x = element_blank(),
axis.title.y = element_text(size=10),
axis.text = element_text(size=10),
axis.text.x = element_text(size = 16),
legend.position = "none")
}
func4("TPM.txt", gene_set = c("BH07.2551", "BH07.2550"), sample = c("Ecf27", "Ecf99", "Ecf108"), replication = 4, pal = c("#7b7b7b","#7b7b7b", "#ee7800"))
func4(file_path = "TPM.txt", gene_set = c("BH07.2551", "BH07.2550"), sample = c("Ecf27", "Ecf99", "Ecf108"), replication = 4, pal = c("#7b7b7b","#7b7b7b", "#ee7800"))
data_arange <- function(file_path, gene_set, sample, replication){
read.table(file_path) -> data
dplyr::mutate(data, genes = rownames(data))  %>%
dplyr::filter(genes %in% gene_set) %>%
tidyr::pivot_longer(col = -genes, names_to = "SAMPLE", values_to = "TPM") %>%
dplyr::mutate(Group = rep(rep(sample, each = replication), length(gene_set)))
}
expression_box <- function(file_path, gene_set, sample, replication, pal){
data_arange(file_path, gene_set, sample, replication) %>%
ggpubr::ggboxplot(x="Group", y="TPM", facet.by = "genes",
color = "Group", ylab = "TPM",
size = 0.2, add="jitter", palette = pal, fill = "Group", alpha=0.4,
add.params = list(size=1),
panel.labs.font = list(size = 12),
panel.labs.background = list(fill = "white", color = "black")) +
theme(axis.title.x = element_blank(),
axis.title.y = element_text(size=10),
axis.text = element_text(size=10),
axis.text.x = element_text(size = 16),
legend.position = "none")
}
expression_box(file_path = "TPM.txt", gene_set = c("BH07.2551", "BH07.2550"), sample = c("Ecf27", "Ecf99", "Ecf108"), replication = 4, pal = c("#7b7b7b","#7b7b7b", "#ee7800"))
library(tidyr)
library(dplyr)
library(ggpubr)
data_arange <- function(file_path, gene_set, sample, replication){
read.table(file_path) -> data
dplyr::mutate(data, genes = rownames(data))  %>%
dplyr::filter(genes %in% gene_set) %>%
tidyr::pivot_longer(col = -genes, names_to = "SAMPLE", values_to = "TPM") %>%
dplyr::mutate(Group = rep(rep(sample, each = replication), length(gene_set)))
}
expression-box <- function(file_path, gene_set, sample, replication, pal){
arange(file_path, gene_set, sample, replication) %>%
ggpubr::ggboxplot(x="Group", y="TPM", facet.by = "genes",
color = "Group", ylab = "TPM",
size = 0.2, add="jitter", palette = pal, fill = "Group", alpha=0.4,
add.params = list(size=1),
panel.labs.font = list(size = 12),
panel.labs.background = list(fill = "white", color = "black")) +
theme(axis.title.x = element_blank(),
axis.title.y = element_text(size=10),
axis.text = element_text(size=10),
axis.text.x = element_text(size = 16),
legend.position = "none")
}
expression_box <- function(file_path, gene_set, sample, replication, pal){
arange(file_path, gene_set, sample, replication) %>%
ggpubr::ggboxplot(x="Group", y="TPM", facet.by = "genes",
color = "Group", ylab = "TPM",
size = 0.2, add="jitter", palette = pal, fill = "Group", alpha=0.4,
add.params = list(size=1),
panel.labs.font = list(size = 12),
panel.labs.background = list(fill = "white", color = "black")) +
theme(axis.title.x = element_blank(),
axis.title.y = element_text(size=10),
axis.text = element_text(size=10),
axis.text.x = element_text(size = 16),
legend.position = "none")
}
expression_box(file_path = "TPM.txt", gene_set = c("BH07.2551", "BH07.2550"), sample = c("Ecf27", "Ecf99", "Ecf108"), replication = 4, pal = c("#7b7b7b","#7b7b7b", "#ee7800"))
data_arange(file_path, gene_set, sample, replication) %>%
ggpubr::ggboxplot(x="Group", y="TPM", facet.by = "genes",
color = "Group", ylab = "TPM",
size = 0.2, add="jitter", palette = pal, fill = "Group", alpha=0.4,
add.params = list(size=1),
panel.labs.font = list(size = 12),
panel.labs.background = list(fill = "white", color = "black")) +
theme(axis.title.x = element_blank(),
axis.title.y = element_text(size=10),
axis.text = element_text(size=10),
axis.text.x = element_text(size = 16),
legend.position = "none")
expression_box <- function(file_path, gene_set, sample, replication, pal){
data_arange(file_path, gene_set, sample, replication) %>%
ggpubr::ggboxplot(x="Group", y="TPM", facet.by = "genes",
color = "Group", ylab = "TPM",
size = 0.2, add="jitter", palette = pal, fill = "Group", alpha=0.4,
add.params = list(size=1),
panel.labs.font = list(size = 12),
panel.labs.background = list(fill = "white", color = "black")) +
theme(axis.title.x = element_blank(),
axis.title.y = element_text(size=10),
axis.text = element_text(size=10),
axis.text.x = element_text(size = 16),
legend.position = "none")
}
expression_box(file_path = "TPM.txt", gene_set = c("BH07.2551", "BH07.2550"), sample = c("Ecf27", "Ecf99", "Ecf108"), replication = 4, pal = c("#7b7b7b","#7b7b7b", "#ee7800"))
getwd()
require(devtools)
devtools::create(".")
getwd()
devtools::create(".")
devtools::document()
devtools::load_all()
help(data_arange)
help(expression_box)
use_package("dplyr")
devtools::document()
devtools::load_all()
devtools::document()
devtools::document()
devtools::load_all()
use_package("dplyr")
use_package("tidyr")
use_package("ggpubr")
sessionInfo()
lsl
devtools::load_all()
devtools::check()
