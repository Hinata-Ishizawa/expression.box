demo()
if (!requireNamespace("devtools", quietly = TRUE))
install.packages("devtools")
if (!requireNamespace("BiocManager", quietly = TRUE))
devtools::install_github("jtlovell/GENESPACE", upgrade = F)
head(iris)
head(cars)
View(cars)
iris
ToothGrowth
View(ToothGrowth)
library(ggplot2)
# tidyverseライブラリを呼び出す
library(tidyverse)
# tidyverseライブラリを呼び出す
library(tidyverse)
# tidyverseライブラリを呼び出す
library(tidyverse)
# ToothGrowthというデータをdataに格納する
d <- ToothGrowth
# 以下ggplot()でデータを可視化してみる
# 使うデータフレームを指定
ggplot(d)
# x軸に使う列を指定
ggplot(d) + aes(x=len)
# グラフ要素はヒストグラムであることを指定
ggplot(d) + aes(x=len) + geom_histogram()
# tidyverseライブラリを呼び出す
library(tidyverse)
# ToothGrowthというデータをdataに格納する
d <- ToothGrowth
# head()関数で上の崇敬を見てみる（データフレーム形式になっていることを確認）
head(d)
# 以下ggplot()でデータを可視化してみる
# 使うデータフレームを指定
ggplot(d)
# x軸に使う列を指定
ggplot(d) + aes(x=len)
# グラフ要素はヒストグラムであることを指定
ggplot(d) + aes(x=len) + geom_histogram()
# 枠色の基準を指定（supp列（サプリの種類）を指定している）
ggplot(d) + aes(x=len, color=supp) + geom_histogram()
# 枠色の基準を指定（supp列（サプリの種類）を指定している）
# 枠色の基準を指定（supp列（サプリの種類）を指定している）
ggplot(d) + aes(x=len, color=supp) + geom_histogram()
# 塗色の基準を指定（supp列（サプリの種類）を指定している）
ggplot(d) + aes(x=len, color=supp, fill=supp) + geom_histogram()
# 塗り色を透明にしている（alphaは0〜1）
ggplot(d) + aes(x=len, color=supp, fill=supp) + geom_histogram(alpha=0.5)
# binsで間隔を指定（データの最小値から最大値までの範囲を100分割）
ggplot(d) + aes(x=len, color=supp, fill=supp) + geom_histogram(alpha=0.5, bins=100)
# p1に格納してみる
p1 <- ggplot(d) +
aes(x=len, color=supp, fill=supp) +
geom_histogram(alpha=0.5, bins=100)
# scale関数で色を変えてみる
p1 +
scale_color_manual(values = c("darkcyan", "darkorange"))
# scale関数で色を変えてみる
p1 +
scale_color_manual(values = c("#ff22ee", "darkorange"))
# scale関数で色を変えてみる
p1 +
scale_color_manual(values = c("#ff22ee", "#223378"))
# scale関数で色を変えてみる
p1 +
scale_color_manual(values = c("#ff22ee", "#226380"))
# scale関数で色を変えてみる
p1 +
scale_color_manual(values = c("#ff22ee", "#b26340"))
p1 + scale_color_manual(values = c("darkcyan", "darkorange")) +
scale_fill_manual(values = c("darkcyan", "darkorange"))
# p2に格納してみる
p2 <- p1 + scale_color_manual(values = c("darkcyan", "darkorange")) +
scale_fill_manual(values = c("darkcyan", "darkorange"))
# scale関数で軸の要素をいじってみる
p2 +
scale_x_continuous(limits = c(0, 50), name = "Length") +
scale_y_continuous(limits = c(0, 10), name = "Count")
p3 <- p2 +
scale_x_continuous(limits = c(0, 50), name = "Length") +
scale_y_continuous(limits = c(0, 10), name = "Count")
p3 + theme(panel.border = element_rect(linewidth = 1, fill = NA),
panel.background = element_rect(fill = NA),
axis.title = element_text(size=10, face = "bold"),
axis.text = element_text(size=8),
legend.text = element_text(size=8),
legend.title = element_blank())
p4 <- p3 + theme(panel.border = element_rect(linewidth = 1, fill = NA),
panel.background = element_rect(fill = NA),
axis.title = element_text(size=10, face = "bold"),
axis.text = element_text(size=8),
legend.text = element_text(size=8),
legend.title = element_blank(),
legend.key.size = unit(0.2, 'cm'))
# ggsave()関数でファイルに保存する
# まずはpdf形式で（イラストレータなどのソフトで修正できる）
# useDingbats=Fで特殊文字が文字化けしない
ggsave(p4, file="ToothGrowth.pdf", width = 8, height = 5, units=c("cm"),
useDingbats = F)
install.packages("ggseqlogo")
library(ggseqlogo)
library("ggseqlogo")
devtools::install_github("omarwagih/ggseqlogo")
require(ggseqlogo)
library(ggseqlogo)
library(ggplot2)
library(tidyverse)
library(devtools)
devtools::install_github("Hinata-Ishizawa/new")
library(new)
help("new")
help(count_business_days)
count_business_days(2018, 6, 12)
help(seq_days_in_months)
require(new)
help(seq_days)
require(devtools)
devtools::install_git(Hinata-Ishizawa/expression.box)
devtools::install_git(Hinata-Ishizawa/expression.box.git)
devtools::install_github("Hinata-Ishizawa/expression.box")
library(expression.box)
setwd("~/Dropbox/Research/1HI0-2")
help("expression_box")
pwd
getwd()
expression_box(file_path = "TPM.txt", gene_set = "BH07.2551", sample = c("Ecf27", "Ecf99", "Ecf108"), replication = 4, pal = c("#444444", "#ff0099", "#99ffff"))
setwd("~/Dropbox/Research/test/testRpackage/expression.box")
devtools::document()
devtools::load_all()
use_package("ggplot2")
sessionInfo()
devtools::check()
devtools::install_github("Hinata-Ishizawa/expression.box")
library(expression.box)
getwd()
setwd("~/Dropbox/Research/1HI0-2")
expression_box(file_path = "TPM.txt", gene_set = "BH07.2551", sample = c("Ecf27", "Ecf99", "Ecf108"), replication = 4, pal = c("#444444", "#ff0099", "#99ffff"))
devtools::check()
setwd("~/Dropbox/Research/test/testRpackage/expression.box")
devtools::check()
devtools::install_github("Hinata-Ishizawa/expression.box")
setwd("~/Dropbox/Research/1HI0-2")
expression_box(file_path = "TPM.txt", gene_set = "BH07.2551", sample = c("Ecf27", "Ecf99", "Ecf108"), replication = 4, pal = c("#444444", "#ff0099", "#99ffff"))
setwd("~/Dropbox/Research/test/testRpackage/expression.box")
devtools::document()
devtools::load_all()
devtools::document()
devtools::document()
devtools::load_all()
use_package("ggplot2")
devtools::check()
devtools::install_github("Hinata-Ishizawa/expression.box")
library(expression.box)
getwd()
expression_box(file_path = "TPM.txt", gene_set = "BH07.2551", sample = c("Ecf27", "Ecf99", "Ecf108"), replication = 4, pal = c("#444444", "#ff0099", "#99ffff"))
install.packages("chatgpt")
library(usethis)
usethis::edit_r_environ()
.rs.restartR()
library(chatgpt)
cat(ask_chatgpt("Please teach me about chatgpt."))
ask_chatgpt("Please teach me about chatgpt.")
help("chatgpt")
help("ask_chatgpt")
getwd()
####################################################################
####### expected.countのファイル ###################################
####################################################################
getwd()
library(dplyr)
file.name <- list.files("result",full.names=T)
file.name[1]
# ループ用に数をカウント
n = length(file.name)
# ループ用にn=1のサンプルについてファイル作成
# 1列名はgene_id、5列名はexpected_count（TPMは6列名）
d1 <- read.table(file.name[1], head = T, sep = "\t") %>% dplyr::select(1,5)
View(d1)
read.table(file.name[1], head = T, sep = "\t")
func1 <- function(directory_path){
file_list <- list.files(path = directory_path)
data_n <- length(file_list)
}
func1 <- function(directory_path){
file_list <- list.files(path = directory_path)
data_n <- length(file_list)
return(data_n)
}
func1("result")
func2 <- function(directory_path){
file_list <- list.files(path = directory_path)
data_n <- length(file_list)
read.table(directory_path/file_list[1], head = T, sep = "\t")
}
func2("result")
func2 <- function(directory_path){
file_list <- list.files(path = directory_path, full.names = TRUE)
data_n <- length(file_list)
read.table(file_list[1], head = T, sep = "\t")
}
func2("result")
func2 <- function(directory_path){
file_list <- list.files(path = directory_path, full.names = TRUE)
data_n <- length(file_list)
read.table(file_list[1], head = T, sep = "\t") %>%
dplyr::select(gene_id, expected_count)
}
func2("result")
func2 <- function(directory_path){
file_list <- list.files(path = directory_path, full.names = TRUE)
data_n <- length(file_list)
exp_count <- read.table(file_list[1], head = T, sep = "\t")
for (i in 2:data_n){
temporary <- read.table(file_list[i], head = T, sep = "\t")
temporary <- dplyr::select(temporary, gene_id, expected_count)
exp_count <- dplyr::left_join(exp_count, temporary, by = "gene_id")
}
return(exp_count)
}
func2("result")
func2 <- function(directory_path){
file_list <- list.files(path = directory_path, full.names = TRUE)
data_n <- length(file_list)
exp_count <- read.table(file_list[1], head = T, sep = "\t")
exp_count <- dplyr::select(exp_count, gene_id, expected_count)
for (i in 2:data_n){
temporary <- read.table(file_list[i], head = T, sep = "\t")
temporary <- dplyr::select(temporary, gene_id, expected_count)
exp_count <- dplyr::left_join(exp_count, temporary, by = "gene_id")
}
return(exp_count)
}
func2("result")
read.table("result/E70.genes.results", head = T, sep = "\t")
func2 <- function(directory_path){
file_list <- list.files(path = directory_path, full.names = TRUE)
data_n <- length(file_list)
exp_count <- read.table(file_list[1], head = T, sep = "\t")
exp_count <- dplyr::select(exp_count, gene_id, expected_count)
for (i in 2:data_n){
temporary <- read.table(file_list[i], head = T, sep = "\t")
temporary <- dplyr::select(temporary, gene_id, expected_count)
exp_count <- dplyr::left_join(exp_count, temporary, by = "gene_id")
}
return(exp_count)
}
func2("result")
select(d1, gene_id, E70 = expected_count)
file_list <- list.files(path = directory_path, full.names = TRUE)
file_list <- list.files(path = "result", full.names = TRUE)
select(d1, gene_id, file_list[1] = expected_count) %>% head()
View(d1)
filename <- file_list[1]
temporary <- read.table(file_list[1], head = T, sep = "\t") %>%
dplyr::select(exp_count, gene_id, expected_count)
temporary <- read.table(file_list[1], head = T, sep = "\t") %>%
dplyr::select(gene_id, expected_count)
colnames(temporary)[colnames(temporary) == expected_count] <- filename
colnames(temporary)[colnames(temporary) == "expected_count"] <- filename
View(temporary)
filename <- sub(".results", "", file_list[1])
temporary <- read.table(file_list[1], head = T, sep = "\t") %>%
dplyr::select(gene_id, expected_count)
colnames(temporary)[colnames(temporary) == "expected_count"] <- filename
filename <- sub(".results|result/", "", file_list[1])
temporary <- read.table(file_list[1], head = T, sep = "\t") %>%
dplyr::select(gene_id, expected_count)
colnames(temporary)[colnames(temporary) == "expected_count"] <- filename
View(temporary)
filename <- sub(".results|result/", "", file_list[1], perl = TRUE)
temporary <- read.table(file_list[1], head = T, sep = "\t") %>%
dplyr::select(gene_id, expected_count)
colnames(temporary)[colnames(temporary) == "expected_count"] <- filename
test <- c("li1_result", "li2_result", "li3_result", "li4_result")
sub("_result|li", "", test, perl = TRUE)
sub("(_result|li)", "", test, perl = TRUE)
sub("(_result|li)", "", test)
filename <- sub(".results", "", file_list[1]) %>%
sub("/result", "")
data_n <- length(file_list1)
file_list1 <- list.files(path = "result", full.names = TRUE)
file_list2 <- list.files(path = "result", full.names = FALSE)
data_n <- length(file_list1)
filename <- file_list2[1]
temporary <- read.table(file_list[1], head = T, sep = "\t") %>%
dplyr::select(gene_id, expected_count)
colnames(temporary)[colnames(temporary) == "expected_count"] <- filename
data_n <- length(file_list1)
filename <- file_list2[1]
exp_count <- read.table(file_list[1], head = T, sep = "\t") %>%
dplyr::select(gene_id, expected_count)
colnames(exp_count)[colnames(exp_count) == "expected_count"] <- filename
filename <- file_list2[2]
temporary <- read.table(file_list1[2], head = T, sep = "\t") %>%
dplyr::select(temporary, gene_id, expected_count)
file_list1[2]
read.table(file_list1[2], head = T, sep = "\t")
temporary <- read.table(file_list1[2], head = T, sep = "\t") %>%
dplyr::select(gene_id, expected_count)
exp_count <- dplyr::left_join(exp_count, temporary, by = "gene_id")
View(exp_count)
colnames(exp_count)[colnames(exp_count) == "expected_count"] <- filename
func2 <- function(directory_path){
file_list1 <- list.files(path = directory_path, full.names = TRUE)
file_list2 <- list.files(path = directory_path, full.names = FALSE)
data_n <- length(file_list1)
filename <- file_list2[1]
exp_count <- read.table(file_list[1], head = T, sep = "\t") %>%
dplyr::select(gene_id, expected_count)
colnames(exp_count)[colnames(exp_count) == "expected_count"] <- filename
for (i in 2:data_n){
filename <- file_list2[i]
temporary <- read.table(file_list1[i], head = T, sep = "\t") %>%
dplyr::select(gene_id, expected_count)
exp_count <- dplyr::left_join(exp_count, temporary, by = "gene_id")
colnames(exp_count)[colnames(exp_count) == "expected_count"] <- filename
}
return(exp_count)
}
func2("result")
View(exp_count)
func2 <- function(directory_path){
file_list1 <- list.files(path = directory_path, full.names = TRUE)
file_list2 <- list.files(path = directory_path, full.names = FALSE)
data_n <- length(file_list1)
filename <- file_list2[1]
exp_count <- read.table(file_list[1], head = T, sep = "\t") %>%
dplyr::select(gene_id, expected_count)
colnames(exp_count)[colnames(exp_count) == "expected_count"] <- filename
for (i in 2:data_n){
filename <- file_list2[i]
temporary <- read.table(file_list1[i], head = T, sep = "\t") %>%
dplyr::select(gene_id, expected_count)
exp_count <- dplyr::left_join(exp_count, temporary, by = "gene_id")
colnames(exp_count)[colnames(exp_count) == "expected_count"] <- filename
}
rownames(exp_count) <- exp_count$gene_id
exp_count2 <- exp_count %>%
select(-gene_id)
return(exp_count2)
}
func2("result")
help("write.table")
func2 <- function(directory_path){
file_list1 <- list.files(path = directory_path, full.names = TRUE)
file_list2 <- list.files(path = directory_path, full.names = FALSE)
data_n <- length(file_list1)
filename <- file_list2[1]
exp_count <- read.table(file_list[1], head = T, sep = "\t") %>%
dplyr::select(gene_id, expected_count)
colnames(exp_count)[colnames(exp_count) == "expected_count"] <- filename
for (i in 2:data_n){
filename <- file_list2[i]
temporary <- read.table(file_list1[i], head = T, sep = "\t") %>%
dplyr::select(gene_id, expected_count)
exp_count <- dplyr::left_join(exp_count, temporary, by = "gene_id")
colnames(exp_count)[colnames(exp_count) == "expected_count"] <- filename
}
rownames(exp_count) <- exp_count$gene_id
exp_count2 <- exp_count %>%
select(-gene_id)
write.table(exp_count2, file = "exp.counts.txt", sep = "\t", quote = FALSE, row.names = TRUE)
}
func2("result")
View(d1)
read.table(file_list[1], head = T, sep = "\t")
data_n <- length(file_list1)
filename <- file_list2[1]
TPM <- read.table(file_list[1], head = T, sep = "\t") %>%
dplyr::select(gene_id, TPM)
View(TPM)
colnames(TPM)[colnames(TPM) == "TPM"] <- filename
func3 <- function(directory_path){
file_list1 <- list.files(path = directory_path, full.names = TRUE)
file_list2 <- list.files(path = directory_path, full.names = FALSE)
data_n <- length(file_list1)
filename <- file_list2[1]
TPM <- read.table(file_list[1], head = T, sep = "\t") %>%
dplyr::select(gene_id, TPM)
colnames(TPM)[colnames(TPM) == "TPM"] <- filename
for (i in 2:data_n){
filename <- file_list2[i]
temporary <- read.table(file_list1[i], head = T, sep = "\t") %>%
dplyr::select(gene_id, TPM)
TPM <- dplyr::left_join(TPM, temporary, by = "gene_id")
colnames(TPM)[colnames(TPM) == "TPM"] <- filename
}
rownames(TPM) <- TPM$gene_id
TPM2 <- TPM %>%
select(-gene_id)
write.table(TPM2, file = "TPM.txt", sep = "\t", quote = FALSE, row.names = TRUE)
}
func3("result")
func3("result")
func4 <- function(directory_path){
func2(directory_path)
func3(directory_path)
}
func4 <- function(directory_path){
func2(directory_path)
func3(directory_path)
}
func4("result")
generate_exp_table <- function(directory_path){
file_list1 <- list.files(path = directory_path, full.names = TRUE)
file_list2 <- list.files(path = directory_path, full.names = FALSE)
data_n <- length(file_list1)
filename <- file_list2[1]
exp_count <- read.table(file_list[1], head = T, sep = "\t") %>%
dplyr::select(gene_id, expected_count)
colnames(exp_count)[colnames(exp_count) == "expected_count"] <- filename
for (i in 2:data_n){
filename <- file_list2[i]
temporary <- read.table(file_list1[i], head = T, sep = "\t") %>%
dplyr::select(gene_id, expected_count)
exp_count <- dplyr::left_join(exp_count, temporary, by = "gene_id")
colnames(exp_count)[colnames(exp_count) == "expected_count"] <- filename
}
rownames(exp_count) <- exp_count$gene_id
exp_count2 <- exp_count %>%
select(-gene_id)
write.table(exp_count2, file = "exp.counts.txt", sep = "\t", quote = FALSE, row.names = TRUE)
}
generate_TPM_table <- function(directory_path){
file_list1 <- list.files(path = directory_path, full.names = TRUE)
file_list2 <- list.files(path = directory_path, full.names = FALSE)
data_n <- length(file_list1)
filename <- file_list2[1]
TPM <- read.table(file_list[1], head = T, sep = "\t") %>%
dplyr::select(gene_id, TPM)
colnames(TPM)[colnames(TPM) == "TPM"] <- filename
for (i in 2:data_n){
filename <- file_list2[i]
temporary <- read.table(file_list1[i], head = T, sep = "\t") %>%
dplyr::select(gene_id, TPM)
TPM <- dplyr::left_join(TPM, temporary, by = "gene_id")
colnames(TPM)[colnames(TPM) == "TPM"] <- filename
}
rownames(TPM) <- TPM$gene_id
TPM2 <- TPM %>%
select(-gene_id)
write.table(TPM2, file = "TPM.txt", sep = "\t", quote = FALSE, row.names = TRUE)
}
generate_both_table <- function(directory_path){
generate_exp_table(directory_path)
generate_TPM_table(directory_path)
}
devtools::document()
devtools::load_all()
help(`generate_exp_table`)
devtools::check()
devtools::install_github("Hinata-Ishizawa/expression.box")
source("~/.active-rstudio-document")
